    def adaptive(self, cnp.ndarray[cnp.float64_t, ndim=1] y0,
                 double x0, double xend, double dx0, double atol,
                 double rtol):
        if y0.size < self.thisptr.ny:
            raise ValueError("y0 too short")
        return self.thisptr.adaptive(<PyObject*>y0, x0, xend, dx0,
                                     atol, rtol)

    def predefined(self, cnp.ndarray[cnp.float64_t, ndim=1] y0,
                   cnp.ndarray[cnp.float64_t, ndim=1] xout,
                   double dx0, double atol, double rtol):
        if y0.size < self.thisptr.ny:
            raise ValueError("y0 too short")
        cdef cnp.ndarray[cnp.float64_t, ndim=2] yout = np.empty(
            (xout.size, y0.size))
        yout[0, :] = y0
        self.thisptr.predefined(<PyObject*>y0, <PyObject*>xout,
                                <PyObject*>yout, dx0, atol, rtol)
        return yout

    def get_xout(self, size_t nsteps):
        cdef cnp.ndarray[cnp.float64_t, ndim=1] xout = np.empty(
            nsteps, dtype=np.float64)
        cdef size_t i
        for i in range(nsteps):
            xout[i] = self.thisptr.xout[i]
        return xout

    def get_yout(self, size_t nsteps):
        cdef cnp.ndarray[cnp.float64_t, ndim=2] yout = np.empty(
            (nsteps, self.thisptr.ny), dtype=np.float64)
        cdef size_t i
        cdef size_t ny = self.thisptr.ny
        for i in range(nsteps):
            for j in range(ny):
                yout[i, j] = self.thisptr.yout[i*ny + j]
        return yout
