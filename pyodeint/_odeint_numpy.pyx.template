# -*- coding: utf-8 -*-
# distutils: language = c++
# distutils: extra_compile_args = -std=c++11

from cpython.object cimport PyObject
from libcpp.vector cimport vector

import numpy as np
cimport numpy as cnp

cnp.import_array()  # Numpy C-API initialization

cdef extern from "odeint_numpy.hpp" namespace "odeint_numpy":
    cdef cppclass PyOdeintRosenbrock4:
        int ny
        vector[double] xout
        vector[double] yout

        PyOdeintRosenbrock4(PyObject*, PyObject*, int)
        size_t adaptive(PyObject*, double, double, double, double, double) except +
        void predefined(PyObject*, PyObject *, PyObject *, double, double, double) except +

    cdef cppclass PyOdeintDopri5:
        int ny
        vector[double] xout
        vector[double] yout

        PyOdeintDopri5(PyObject*, int)
        size_t adaptive(PyObject*, double, double, double, double, double) except +
        void predefined(PyObject*, PyObject *, PyObject *, double, double, double) except +

    cdef cppclass PyOdeintBulirschStoer:
        int ny
        vector[double] xout
        vector[double] yout

        PyOdeintBulirschStoer(PyObject*, int)
        size_t adaptive(PyObject*, double, double, double, double, double) except +
        void predefined(PyObject*, PyObject *, PyObject *, double, double, double) except +


cdef class OdeintRosenbrock4:

    cdef PyOdeintRosenbrock4 *thisptr

    def __cinit__(self, object rhs, object jac, int ny):
        self.thisptr = new PyOdeintRosenbrock4(<PyObject *>rhs, <PyObject *>jac, ny)

    def __dealloc__(self):
        del self.thisptr

${INTEGRATOR_METHODS}


cdef class OdeintDopri5:

    cdef PyOdeintDopri5 *thisptr

    def __cinit__(self, object rhs, object jac, int ny):
        # silently drop jac, maybe not the best design..
        self.thisptr = new PyOdeintDopri5(<PyObject *>rhs, ny)

    def __dealloc__(self):
        del self.thisptr

${INTEGRATOR_METHODS}


cdef class OdeintBulirschStoer:

    cdef PyOdeintBulirschStoer *thisptr

    def __cinit__(self, object rhs, object jac, int ny):
        # silently drop jac, maybe not the best design..
        self.thisptr = new PyOdeintBulirschStoer(<PyObject *>rhs, ny)

    def __dealloc__(self):
        del self.thisptr

${INTEGRATOR_METHODS}


Integrator = {
    'rosenbrock4': OdeintRosenbrock4,
    'dopri5': OdeintDopri5,
    'bs': OdeintBulirschStoer,
}


def integrate_adaptive(rhs, jac, y0, x0, xend, dx0, double atol, double rtol,
                       method='rosenbrock4'):
    cdef size_t nsteps
    integr = Integrator[method](rhs, jac, len(y0))
    nsteps = integr.adaptive(np.asarray(y0), x0, xend, dx0, atol, rtol)
    return integr.get_xout(nsteps), integr.get_yout(nsteps)


def integrate_predefined(rhs, jac, y0, xout, double dx0, double atol, double rtol,
                         method='rosenbrock4'):
    integr = Integrator[method](rhs, jac, len(y0))
    yout = integr.predefined(
        np.asarray(y0, dtype=np.float64),
        np.asarray(xout, dtype=np.float64),
        dx0, atol, rtol)
    return yout
